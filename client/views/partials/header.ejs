<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Test VR App</title>
    <meta name="description" content="Test VR app">
    
    <!--<script src="client/lib/aframe/dist/aframe-v1.3.0.min.js"></script>-->
    
    <script src="https://aframe.io/releases/1.2.0/aframe.min.js"></script>
    <script src="https://unpkg.com/aframe-environment-component@1.2.0/dist/aframe-environment-component.min.js"></script>

    <!--script src="client/lib/aframe-environment-component/dist/aframe-environment-component.min.js"></script>-->
    <script src="client/lib/aframe-extras/dist/aframe-extras.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/galadirith/aframe-teleport-controls@ec9d19c/dist/aframe-teleport-controls.js"></script>

    <!--<script src="https://rawgit.com/fernandojsg/aframe-teleport-controls/master/dist/aframe-teleport-controls.min.js"></script>-->
    <script src="https://mixedreality.mozilla.org/ammo.js/builds/ammo.wasm.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/n5ro/aframe-physics-system@v4.0.1/dist/aframe-physics-system.js"></script>
    <script src="https://unpkg.com/aframe-event-set-component@4.1.1/dist/aframe-event-set-component.min.js"></script>

    <!--<script src="https://unpkg.com/super-hands@^3.0.1/dist/super-hands.min.js"></script>-->
    <script src="client/lib/aframe-super-hands-component/dist/super-hands.js"></script>
    <script src="client/lib/aframe-material/dist/aframe-material.min.js"></script>
    <script type="text/javascript">
        AFRAME.ASSETS_PATH = "public/assets";
    </script>

    <script type="text/javascript">
        AFRAME.registerComponent('change-color-on-hover', {
            schema: {
                color: {default: 'red'}
            },
        
            init: function () {
                var data = this.data;
                var el = this.el;  // a-frame entity
                var defaultColor = el.getAttribute('color');
        
                el.addEventListener('mouseenter', function () {
                    el.setAttribute('color', data.color);
                });
        
                el.addEventListener('mouseleave', function () {
                    el.setAttribute('color', defaultColor);
                });
            }
        });

        AFRAME.registerComponent('phase-shift', {
            init: function () {
            var el = this.el
            el.addEventListener('gripdown', function () {
                el.setAttribute('ammo-body', {disableCollision: false})
            })
            el.addEventListener('gripup', function () {
                el.setAttribute('ammo-body', {disableCollision: true})
            })
            }
        });

        AFRAME.registerComponent('transform-if-collided', {
            init: function () {
                this.el.addEventListener('collidestart', function (evt) {
                    var target=evt.detail.targetEl;
                    var target_id= target.getAttribute('id');
                    
                    if (target_id=== "current_node"){
                        var data= target.getAttribute('object-data');
                        var sceneEl = document.querySelector('a-scene');

                        if (data!=="{}"){
                            var screenl = document.createElement('a-rounded');
                            screenl.setAttribute('width', "1");
                            screenl.setAttribute('height', "1");
                            screenl.setAttribute('radius', "0.05");
                            screenl.setAttribute('rotation', "0 45 0");
                            screenl.setAttribute('color', "#cccccc");
                            screenl.setAttribute('position', "-1.5 1 -1.4");
                            screenl.setAttribute('class', "info-screen");

                            var screenc = document.createElement('a-rounded');
                            screenc.setAttribute('width', "1");
                            screenc.setAttribute('height', "1");
                            screenc.setAttribute('radius', "0.05");
                            screenc.setAttribute('rotation', "0 0 0");
                            screenc.setAttribute('color', "#cccccc");
                            screenc.setAttribute('position', "-0.5 1 -2");
                            screenc.setAttribute('class', "info-screen");

                            var screenr = document.createElement('a-rounded');
                            screenr.setAttribute('width', "1");
                            screenr.setAttribute('height', "1");
                            screenr.setAttribute('radius', "0.05");
                            screenr.setAttribute('rotation', "0 315 0");
                            screenr.setAttribute('color', "#cccccc");
                            screenr.setAttribute('position', "0.75 1 -2");
                            screenr.setAttribute('class', "info-screen");

                            sceneEl.appendChild(screenl);
                            sceneEl.appendChild(screenc);
                            sceneEl.appendChild(screenr);
                        }

                    }
                    

                });

                this.el.addEventListener('collideend', function (evt) {
                    var target=evt.detail.targetEl;
                    var target_id= target.getAttribute('id');
                    //console.log("collision with booth ended");

                    if (target_id=== "current_node"){
                        document.querySelectorAll(".info-screen").forEach(e => e.parentNode.removeChild(e));
                        
                        var add_booth=document.createElement('a-entity');
                        add_booth.setAttribute('geometry',"cylinder");
                        add_booth.setAttribute('height', "0.03"); 
                        add_booth.setAttribute("radius", '0.2');
                        add_booth.setAttribute("material","color:green");
                        add_booth.setAttribute("ammo-body","type: static; emitCollisionEvents: true" );
                        add_booth.setAttribute("ammo-shape","type: box");
                        add_booth.addEventListener('collidestart', function(evt){ evt.detail.targetEl.parentNode.removeChild(evt.detail.targetEl)});
                        add_booth.setAttribute('position', "-0.5 0.78 -0.9");
                        add_booth.setAttribute('class', "action-button");

                        var sceneEl = document.querySelector('a-scene');

                        sceneEl.appendChild(add_booth);

                    }

                });
            }
        });

    </script>
  </head>
  <body>