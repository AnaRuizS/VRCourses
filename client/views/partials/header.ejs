<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Test VR App</title>
    <meta name="description" content="Test VR app">
    
    <script src="https://unpkg.com/browse/pdfjs-dist@2.14.305/build/pdf.min.js"></script>
    
    <script src="https://aframe.io/releases/1.2.0/aframe.min.js"></script>
    <script src="https://unpkg.com/aframe-environment-component@1.2.0/dist/aframe-environment-component.min.js"></script>

    <!--script src="client/lib/aframe-environment-component/dist/aframe-environment-component.min.js"></script>-->
    <script src="client/lib/aframe-extras/dist/aframe-extras.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/galadirith/aframe-teleport-controls@ec9d19c/dist/aframe-teleport-controls.js"></script>

    <!--<script src="https://rawgit.com/fernandojsg/aframe-teleport-controls/master/dist/aframe-teleport-controls.min.js"></script>-->
    <script src="https://mixedreality.mozilla.org/ammo.js/builds/ammo.wasm.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/n5ro/aframe-physics-system@v4.0.1/dist/aframe-physics-system.js"></script>
    <script src="https://unpkg.com/aframe-event-set-component@4.1.1/dist/aframe-event-set-component.min.js"></script>

    <!--<script src="https://unpkg.com/super-hands@^3.0.1/dist/super-hands.min.js"></script>-->
    <script src="client/lib/aframe-super-hands-component/dist/super-hands.js"></script>
    <script src="client/lib/aframe-material/dist/aframe-material.min.js"></script>
    <script type="text/javascript">
        AFRAME.ASSETS_PATH = "public/assets";
    </script>

    <script type="text/javascript">
        // Change color when raycaster hovers (left hand control)
        AFRAME.registerComponent('change-color-on-hover', {
            schema: {
                color: {default: 'red'}
            },
        
            init: function () {
                var data = this.data;
                var el = this.el;  // a-frame entity
                var defaultColor = el.getAttribute('color');
        
                el.addEventListener('mouseenter', function () {
                    el.setAttribute('color', data.color);
                });
        
                el.addEventListener('mouseleave', function () {
                    el.setAttribute('color', defaultColor);
                });
            }
        });

        // physics to stop collisions until grip pressed
        AFRAME.registerComponent('phase-shift', {
            init: function () {
                var el = this.el
                el.addEventListener('gripdown', function () {
                    el.setAttribute('ammo-body', {disableCollision: false})
                })
                el.addEventListener('gripup', function () {
                    el.setAttribute('ammo-body', {disableCollision: true})
                })
            }
        });

        //Actions when search button is clicked
        AFRAME.registerComponent('search-clicked',{
            init: function () {
                var el = this.el;

                el.addEventListener('click', ()=> {
                    let input1=document.querySelector("#input-1");
                    let input_string=input1.getAttribute('value');

                    fetch('/node_search', {
                            method: 'POST',
                            headers: {'Content-Type':'application/json'},
                            body: JSON.stringify({input: input_string})
                        })
                        .then(res=>res.json())
                        .then(res =>{
                            
                            // show toast with info
                            var toast = document.querySelector("#search-toast");
                            toast.setAttribute('message',res.data[0] ? "Node found!": "Please try another query");
                            toast.show();

                            // if search sucess then
                            if (res.data.length !== 0 ){
                                // hide keyboard and input
                                document.querySelectorAll(".search-view").forEach(e => e.setAttribute('scale',"0 0 0"));
                                document.querySelector("#go_button").setAttribute('scale',"0 0 0");

                                // show action booths
                                document.querySelectorAll(".node-view").forEach(e => e.setAttribute('scale',"1 1 1"));
                                // show info screens
                                document.querySelectorAll(".info-screen").forEach(e => e.setAttribute('scale',"1 1 1"));

                                // show sphere in original position (sync w ammo physics and fill w data first item in list)
                                document.querySelector('#current_node_label').setAttribute("text__1", 'value', `${res.data[0].name}`);
                                document.querySelector("#current_node").setAttribute('visible',"true");
                                document.querySelector('#current_node').setAttribute('object-data', res.data[0] ? "{source: 'https://3quarksdaily.com/3quarksdaily/2013/03/the-inscrutable-brilliance-of-anne-carson.html'}":"{}");

                            }else{

                                document.querySelector("#current_node").setAttribute('visible',"false");
                            }

                        });
                });
            
            }

        });

        AFRAME.registerComponent('transform-if-collided', {
            init: function () {
                this.el.addEventListener('collidestart', function (evt) {
                    var target=evt.detail.targetEl;
                    var target_id= target.getAttribute('id');
                    
                    if (target_id=== "current_node"){
                        var data= target.getAttribute('object-data');
                        var sceneEl = document.querySelector('a-scene');

                        if (data!=="{}"){
                            // add data to info screens
                        }

                    }
                    

                });

                this.el.addEventListener('collideend', function (evt) {
                    var target=evt.detail.targetEl;
                    var target_id= target.getAttribute('id');

                    if (target_id=== "current_node"){
                        // remove data from info screens
                    }

                });
            }
        });

        AFRAME.registerComponent('back-to-search', {
            init: function () {
                this.el.addEventListener('collidestart', function (evt) {
                    // hide all elements in node view
                    document.querySelectorAll(".node-view").forEach(e => e.setAttribute('scale',"0 0 0"));
                    document.querySelector("#current_node").setAttribute('visible',"false");
                    document.querySelectorAll(".info-screen").forEach(e => e.setAttribute('scale',"0 0 0"));
                    
                    //show node search elements
                    document.querySelectorAll(".search-view").forEach(e => e.setAttribute('scale',"1 1 1"));
                    document.querySelector("#go_button").setAttribute('scale',"0.5 0.5 0.5");
                    

                });
            }
        });

    </script>
  </head>
  <body>